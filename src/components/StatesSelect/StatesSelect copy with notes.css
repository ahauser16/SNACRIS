/* *,
*::before,
*::after {
    box-sizing: border-box;
}

:root {
    --select-border: var(--form-field-border--default);
    --select-focus: var(--form-field-border--focus);
    --select-arrow: var(--form-field-border--default);
}

.states-select--container .select select {
    /* // A reset of styles, including removing the default dropdown arrow */
    appearance: none;
    /* // Additional resets for further consistency */
    background-color: transparent;
    border: none;
    padding: 0 1em 0 0;
    margin: 0;
    width: 100%;
    font-family: inherit;
    font-size: inherit;
    cursor: inherit;
    line-height: inherit;

    /* Stack above custom arrow */
    z-index: 1;
}

/* Remove focus outline, will add on alternate element */
select:focus {
    outline: none;
}

.states-select--container .select {
    width: 100%;
    /* First, we set up some width constraints. The min-width and max-width values are mostly for this demo, and you may choose to drop or alter it for your use case. */
    min-width: 8ch;
    max-width: 16ch;
    border: 2px solid var(--form-field-border--default);
    border-radius: var(--border-radius);
    padding: 0.25em 0.5em;
    font-size: 1.25rem;
    cursor: pointer;
    line-height: 1;
    background-color: #fff;
    background-image: linear-gradient(to top, #f9f9f9, #fff 33%);
    /* If you're following along, you may have noticed the arrow is not appearing despite defining width and height. When inspected, its found that the ::after is not actually being allowed it's width.  We will resolve this by updating our .select to use CSS grid layout. */
    display: grid;
    grid-template-areas: "select";
    align-items: center;
    position: relative;
}

/* To create the arrow, we will define it as an ::after pseudo-element. */
.states-select--container .select::after {
    content: "";
    width: 0.8em;
    height: 0.5em;
    background-color: var(--select-arrow);
    clip-path: polygon(100% 0%, 0 0%, 50% 100%);
}

.states-select--container select,
.states-select--container .select:after {
    grid-area: select;
    justify-self: end;
}

/* Custom arrow */
.states-select--container .select:not(.select--multiple)::after {
    content: "";
    justify-self: end;
    width: 0.8em;
    height: 0.5em;
    background-color: var(--select-arrow);
    clip-path: polygon(100% 0%, 0 0%, 50% 100%);
}

.states-select--container .select select:focus+.focus {
    position: absolute;
    top: -1px;
    left: -1px;
    right: -1px;
    bottom: -1px;
    border: 2px solid var(--select-focus);
    border-radius: inherit;
}

.states-select--container .select select[multiple] {
    padding-right: 0;
    height: 6rem;
}

.states-select--container .select select[multiple] option {
    white-space: normal;
    outline-color: var(--select-focus);
}

.states-select--container .select--disabled {
    cursor: not-allowed;
    background-color: #eee;
    background-image: linear-gradient(to top, #ddd, #eee 33%);
}

.states-select--container .select label {
    font-size: 1.125rem;
    font-weight: 500;
}

.states-select--container .select+label {
    margin-top: 2rem;
} */